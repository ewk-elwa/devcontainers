# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

test_k3d:
  stage: test
  image: alpine:latest
  services:
    - name: rancher/k3d:latest-dind
    # - name:  docker:dind
      alias: k3d-dind
      command: ["dockerd-entrypoint.sh"]
  variables:
    CLUSTER: rancher
    DOCKER_HOST: tcp://k3d-dind:2375
    K3D_FIX_DIND: "1"  # Needed for K3d in DinD mode
  before_script:
    - ./install-test-tools.sh
    # - apk add --no-cache docker-cli bash curl
    # - curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
    # - curl -sL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xz
    # - mv linux-amd64/helm /usr/local/bin/
    # - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    # - printf "%.0s=" {1..50}
    # - ls -al
    # - chmod +x kubectl
    # - printf "%.0s=" {1..50}
    # - mv kubectl /usr/local/bin/
    # - export PATH=$PATH:/usr/local/bin
  script:
    - echo "Creating K3d cluster..."
    - k3d cluster create $CLUSTER --wait
    - echo "Waiting for cluster readiness..."
    - sleep 10
    - export KUBECONFIG=$(k3d kubeconfig write $CLUSTER)
    - kubectl config set-cluster $CLUSTER --insecure-skip-tls-verify=true
    - echo "Testing kubectl access..."
    - kubectl cluster-info
    - kubectl get nodes
    - echo "Installing Helm chart..."
    - helm repo add bitnami https://charts.bitnami.com/bitnami
    - helm repo update
    - helm install my-nginx bitnami/nginx
    - echo "Checking deployed Helm release..."
    - kubectl get pods -A
  after_script:
    - echo "Cleaning up K3d cluster..."
    - k3d cluster delete $CLUSTER
  only:
    - main

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
